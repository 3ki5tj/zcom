Performance tips:

1. include rng.c
directly include "rng.c" 3.3s for 10^8 moves (icc)
vs.
include "rng.h" and compile with "rng.c" 3.8s (icc)

2. It appears that the signed version (s = -1, 1) is
about 10% faster than the unsigned version (s = 0, 1).

3. Benchmark is2ref.c, for 10^9 moves, BETA = 0.4, all-spin-down
  24.0s (using double rnd0() < proba[h])
  22.0s (using unsigned rnd0() < proba[h])
  14.0s (using sequential move, balance vs. detailed balance)
  + this means 8.0s for 10^9 random numbers

* int id, ix, iy;      id = (int)(N*rnd0());        32.8s
* unsigned id, ix, iy; ...                          29.9s
* ...                  id = (unsigned)(N*rnd0());   35.5s  (surprise!)
* unsigned id, ix, iy; id = mtrand()>>(32-10);      24.0s
* E += h*2 ==> E += h << 1;                         24.0s
* bad indexing function hurts performance, e.g.,    24.4s!
  #define IX(ix, iy) (((ix)&(L-1)) | ((iy)<<LB))
  #define IY(ix, iy) ((ix) | ((iy)&(L-1))<<LB)
  This is because this "optimization" is a blunder!

Compiler's version is much better:
ix = id %L, iy = id /L, IX(ix+1, iy):
  id == eax
  lea       1(%eax), %edx    # edx = eax+1
  andl      $31, %edx        # edx &= 31   or edx %= 32
  andl      $-32, %eax       # eax &= -32,  filter out the low bit
  addl      %eax, %edx       # edx += eax


